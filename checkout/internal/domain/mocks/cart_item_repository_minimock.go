package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/checkout/internal/domain.CartItemRepository -o ./mocks\cart_item_repository_minimock.go -n CartItemRepositoryMock

import (
	"context"
	mm_domain "route256/checkout/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// CartItemRepositoryMock implements domain.CartItemRepository
type CartItemRepositoryMock struct {
	t minimock.Tester

	funcCreate          func(ctx context.Context, cartItem *mm_domain.CartItem) (err error)
	inspectFuncCreate   func(ctx context.Context, cartItem *mm_domain.CartItem)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mCartItemRepositoryMockCreate

	funcDelete          func(ctx context.Context, cartItem *mm_domain.CartItem) (err error)
	inspectFuncDelete   func(ctx context.Context, cartItem *mm_domain.CartItem)
	afterDeleteCounter  uint64
	beforeDeleteCounter uint64
	DeleteMock          mCartItemRepositoryMockDelete

	funcGetOne          func(ctx context.Context, user int64, sku uint32) (cp1 *mm_domain.CartItem, err error)
	inspectFuncGetOne   func(ctx context.Context, user int64, sku uint32)
	afterGetOneCounter  uint64
	beforeGetOneCounter uint64
	GetOneMock          mCartItemRepositoryMockGetOne

	funcGetUserCartItems          func(ctx context.Context, user int64) (cpa1 []*mm_domain.CartItem, err error)
	inspectFuncGetUserCartItems   func(ctx context.Context, user int64)
	afterGetUserCartItemsCounter  uint64
	beforeGetUserCartItemsCounter uint64
	GetUserCartItemsMock          mCartItemRepositoryMockGetUserCartItems

	funcUpdate          func(ctx context.Context, cartItem *mm_domain.CartItem) (err error)
	inspectFuncUpdate   func(ctx context.Context, cartItem *mm_domain.CartItem)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mCartItemRepositoryMockUpdate
}

// NewCartItemRepositoryMock returns a mock for domain.CartItemRepository
func NewCartItemRepositoryMock(t minimock.Tester) *CartItemRepositoryMock {
	m := &CartItemRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mCartItemRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*CartItemRepositoryMockCreateParams{}

	m.DeleteMock = mCartItemRepositoryMockDelete{mock: m}
	m.DeleteMock.callArgs = []*CartItemRepositoryMockDeleteParams{}

	m.GetOneMock = mCartItemRepositoryMockGetOne{mock: m}
	m.GetOneMock.callArgs = []*CartItemRepositoryMockGetOneParams{}

	m.GetUserCartItemsMock = mCartItemRepositoryMockGetUserCartItems{mock: m}
	m.GetUserCartItemsMock.callArgs = []*CartItemRepositoryMockGetUserCartItemsParams{}

	m.UpdateMock = mCartItemRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*CartItemRepositoryMockUpdateParams{}

	return m
}

type mCartItemRepositoryMockCreate struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockCreateExpectation
	expectations       []*CartItemRepositoryMockCreateExpectation

	callArgs []*CartItemRepositoryMockCreateParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockCreateExpectation specifies expectation struct of the CartItemRepository.Create
type CartItemRepositoryMockCreateExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockCreateParams
	results *CartItemRepositoryMockCreateResults
	Counter uint64
}

// CartItemRepositoryMockCreateParams contains parameters of the CartItemRepository.Create
type CartItemRepositoryMockCreateParams struct {
	ctx      context.Context
	cartItem *mm_domain.CartItem
}

// CartItemRepositoryMockCreateResults contains results of the CartItemRepository.Create
type CartItemRepositoryMockCreateResults struct {
	err error
}

// Expect sets up expected params for CartItemRepository.Create
func (mmCreate *mCartItemRepositoryMockCreate) Expect(ctx context.Context, cartItem *mm_domain.CartItem) *mCartItemRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CartItemRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &CartItemRepositoryMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &CartItemRepositoryMockCreateParams{ctx, cartItem}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.Create
func (mmCreate *mCartItemRepositoryMockCreate) Inspect(f func(ctx context.Context, cartItem *mm_domain.CartItem)) *mCartItemRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by CartItemRepository.Create
func (mmCreate *mCartItemRepositoryMockCreate) Return(err error) *CartItemRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CartItemRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &CartItemRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &CartItemRepositoryMockCreateResults{err}
	return mmCreate.mock
}

// Set uses given function f to mock the CartItemRepository.Create method
func (mmCreate *mCartItemRepositoryMockCreate) Set(f func(ctx context.Context, cartItem *mm_domain.CartItem) (err error)) *CartItemRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the CartItemRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mCartItemRepositoryMockCreate) When(ctx context.Context, cartItem *mm_domain.CartItem) *CartItemRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("CartItemRepositoryMock.Create mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &CartItemRepositoryMockCreateParams{ctx, cartItem},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.Create return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockCreateExpectation) Then(err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockCreateResults{err}
	return e.mock
}

// Create implements domain.CartItemRepository
func (mmCreate *CartItemRepositoryMock) Create(ctx context.Context, cartItem *mm_domain.CartItem) (err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, cartItem)
	}

	mm_params := &CartItemRepositoryMockCreateParams{ctx, cartItem}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockCreateParams{ctx, cartItem}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("CartItemRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the CartItemRepositoryMock.Create")
		}
		return (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, cartItem)
	}
	mmCreate.t.Fatalf("Unexpected call to CartItemRepositoryMock.Create. %v %v", ctx, cartItem)
	return
}

// CreateAfterCounter returns a count of finished CartItemRepositoryMock.Create invocations
func (mmCreate *CartItemRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of CartItemRepositoryMock.Create invocations
func (mmCreate *CartItemRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mCartItemRepositoryMockCreate) Calls() []*CartItemRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.Create")
	}
}

type mCartItemRepositoryMockDelete struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockDeleteExpectation
	expectations       []*CartItemRepositoryMockDeleteExpectation

	callArgs []*CartItemRepositoryMockDeleteParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockDeleteExpectation specifies expectation struct of the CartItemRepository.Delete
type CartItemRepositoryMockDeleteExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockDeleteParams
	results *CartItemRepositoryMockDeleteResults
	Counter uint64
}

// CartItemRepositoryMockDeleteParams contains parameters of the CartItemRepository.Delete
type CartItemRepositoryMockDeleteParams struct {
	ctx      context.Context
	cartItem *mm_domain.CartItem
}

// CartItemRepositoryMockDeleteResults contains results of the CartItemRepository.Delete
type CartItemRepositoryMockDeleteResults struct {
	err error
}

// Expect sets up expected params for CartItemRepository.Delete
func (mmDelete *mCartItemRepositoryMockDelete) Expect(ctx context.Context, cartItem *mm_domain.CartItem) *mCartItemRepositoryMockDelete {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CartItemRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CartItemRepositoryMockDeleteExpectation{}
	}

	mmDelete.defaultExpectation.params = &CartItemRepositoryMockDeleteParams{ctx, cartItem}
	for _, e := range mmDelete.expectations {
		if minimock.Equal(e.params, mmDelete.defaultExpectation.params) {
			mmDelete.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmDelete.defaultExpectation.params)
		}
	}

	return mmDelete
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.Delete
func (mmDelete *mCartItemRepositoryMockDelete) Inspect(f func(ctx context.Context, cartItem *mm_domain.CartItem)) *mCartItemRepositoryMockDelete {
	if mmDelete.mock.inspectFuncDelete != nil {
		mmDelete.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.Delete")
	}

	mmDelete.mock.inspectFuncDelete = f

	return mmDelete
}

// Return sets up results that will be returned by CartItemRepository.Delete
func (mmDelete *mCartItemRepositoryMockDelete) Return(err error) *CartItemRepositoryMock {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CartItemRepositoryMock.Delete mock is already set by Set")
	}

	if mmDelete.defaultExpectation == nil {
		mmDelete.defaultExpectation = &CartItemRepositoryMockDeleteExpectation{mock: mmDelete.mock}
	}
	mmDelete.defaultExpectation.results = &CartItemRepositoryMockDeleteResults{err}
	return mmDelete.mock
}

// Set uses given function f to mock the CartItemRepository.Delete method
func (mmDelete *mCartItemRepositoryMockDelete) Set(f func(ctx context.Context, cartItem *mm_domain.CartItem) (err error)) *CartItemRepositoryMock {
	if mmDelete.defaultExpectation != nil {
		mmDelete.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.Delete method")
	}

	if len(mmDelete.expectations) > 0 {
		mmDelete.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.Delete method")
	}

	mmDelete.mock.funcDelete = f
	return mmDelete.mock
}

// When sets expectation for the CartItemRepository.Delete which will trigger the result defined by the following
// Then helper
func (mmDelete *mCartItemRepositoryMockDelete) When(ctx context.Context, cartItem *mm_domain.CartItem) *CartItemRepositoryMockDeleteExpectation {
	if mmDelete.mock.funcDelete != nil {
		mmDelete.mock.t.Fatalf("CartItemRepositoryMock.Delete mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockDeleteExpectation{
		mock:   mmDelete.mock,
		params: &CartItemRepositoryMockDeleteParams{ctx, cartItem},
	}
	mmDelete.expectations = append(mmDelete.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.Delete return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockDeleteExpectation) Then(err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockDeleteResults{err}
	return e.mock
}

// Delete implements domain.CartItemRepository
func (mmDelete *CartItemRepositoryMock) Delete(ctx context.Context, cartItem *mm_domain.CartItem) (err error) {
	mm_atomic.AddUint64(&mmDelete.beforeDeleteCounter, 1)
	defer mm_atomic.AddUint64(&mmDelete.afterDeleteCounter, 1)

	if mmDelete.inspectFuncDelete != nil {
		mmDelete.inspectFuncDelete(ctx, cartItem)
	}

	mm_params := &CartItemRepositoryMockDeleteParams{ctx, cartItem}

	// Record call args
	mmDelete.DeleteMock.mutex.Lock()
	mmDelete.DeleteMock.callArgs = append(mmDelete.DeleteMock.callArgs, mm_params)
	mmDelete.DeleteMock.mutex.Unlock()

	for _, e := range mmDelete.DeleteMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmDelete.DeleteMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmDelete.DeleteMock.defaultExpectation.Counter, 1)
		mm_want := mmDelete.DeleteMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockDeleteParams{ctx, cartItem}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmDelete.t.Errorf("CartItemRepositoryMock.Delete got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmDelete.DeleteMock.defaultExpectation.results
		if mm_results == nil {
			mmDelete.t.Fatal("No results are set for the CartItemRepositoryMock.Delete")
		}
		return (*mm_results).err
	}
	if mmDelete.funcDelete != nil {
		return mmDelete.funcDelete(ctx, cartItem)
	}
	mmDelete.t.Fatalf("Unexpected call to CartItemRepositoryMock.Delete. %v %v", ctx, cartItem)
	return
}

// DeleteAfterCounter returns a count of finished CartItemRepositoryMock.Delete invocations
func (mmDelete *CartItemRepositoryMock) DeleteAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.afterDeleteCounter)
}

// DeleteBeforeCounter returns a count of CartItemRepositoryMock.Delete invocations
func (mmDelete *CartItemRepositoryMock) DeleteBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmDelete.beforeDeleteCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.Delete.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmDelete *mCartItemRepositoryMockDelete) Calls() []*CartItemRepositoryMockDeleteParams {
	mmDelete.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockDeleteParams, len(mmDelete.callArgs))
	copy(argCopy, mmDelete.callArgs)

	mmDelete.mutex.RUnlock()

	return argCopy
}

// MinimockDeleteDone returns true if the count of the Delete invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockDeleteDone() bool {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		return false
	}
	return true
}

// MinimockDeleteInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockDeleteInspect() {
	for _, e := range m.DeleteMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.Delete with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.DeleteMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		if m.DeleteMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.Delete")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.Delete with params: %#v", *m.DeleteMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcDelete != nil && mm_atomic.LoadUint64(&m.afterDeleteCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.Delete")
	}
}

type mCartItemRepositoryMockGetOne struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockGetOneExpectation
	expectations       []*CartItemRepositoryMockGetOneExpectation

	callArgs []*CartItemRepositoryMockGetOneParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockGetOneExpectation specifies expectation struct of the CartItemRepository.GetOne
type CartItemRepositoryMockGetOneExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockGetOneParams
	results *CartItemRepositoryMockGetOneResults
	Counter uint64
}

// CartItemRepositoryMockGetOneParams contains parameters of the CartItemRepository.GetOne
type CartItemRepositoryMockGetOneParams struct {
	ctx  context.Context
	user int64
	sku  uint32
}

// CartItemRepositoryMockGetOneResults contains results of the CartItemRepository.GetOne
type CartItemRepositoryMockGetOneResults struct {
	cp1 *mm_domain.CartItem
	err error
}

// Expect sets up expected params for CartItemRepository.GetOne
func (mmGetOne *mCartItemRepositoryMockGetOne) Expect(ctx context.Context, user int64, sku uint32) *mCartItemRepositoryMockGetOne {
	if mmGetOne.mock.funcGetOne != nil {
		mmGetOne.mock.t.Fatalf("CartItemRepositoryMock.GetOne mock is already set by Set")
	}

	if mmGetOne.defaultExpectation == nil {
		mmGetOne.defaultExpectation = &CartItemRepositoryMockGetOneExpectation{}
	}

	mmGetOne.defaultExpectation.params = &CartItemRepositoryMockGetOneParams{ctx, user, sku}
	for _, e := range mmGetOne.expectations {
		if minimock.Equal(e.params, mmGetOne.defaultExpectation.params) {
			mmGetOne.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetOne.defaultExpectation.params)
		}
	}

	return mmGetOne
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.GetOne
func (mmGetOne *mCartItemRepositoryMockGetOne) Inspect(f func(ctx context.Context, user int64, sku uint32)) *mCartItemRepositoryMockGetOne {
	if mmGetOne.mock.inspectFuncGetOne != nil {
		mmGetOne.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.GetOne")
	}

	mmGetOne.mock.inspectFuncGetOne = f

	return mmGetOne
}

// Return sets up results that will be returned by CartItemRepository.GetOne
func (mmGetOne *mCartItemRepositoryMockGetOne) Return(cp1 *mm_domain.CartItem, err error) *CartItemRepositoryMock {
	if mmGetOne.mock.funcGetOne != nil {
		mmGetOne.mock.t.Fatalf("CartItemRepositoryMock.GetOne mock is already set by Set")
	}

	if mmGetOne.defaultExpectation == nil {
		mmGetOne.defaultExpectation = &CartItemRepositoryMockGetOneExpectation{mock: mmGetOne.mock}
	}
	mmGetOne.defaultExpectation.results = &CartItemRepositoryMockGetOneResults{cp1, err}
	return mmGetOne.mock
}

// Set uses given function f to mock the CartItemRepository.GetOne method
func (mmGetOne *mCartItemRepositoryMockGetOne) Set(f func(ctx context.Context, user int64, sku uint32) (cp1 *mm_domain.CartItem, err error)) *CartItemRepositoryMock {
	if mmGetOne.defaultExpectation != nil {
		mmGetOne.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.GetOne method")
	}

	if len(mmGetOne.expectations) > 0 {
		mmGetOne.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.GetOne method")
	}

	mmGetOne.mock.funcGetOne = f
	return mmGetOne.mock
}

// When sets expectation for the CartItemRepository.GetOne which will trigger the result defined by the following
// Then helper
func (mmGetOne *mCartItemRepositoryMockGetOne) When(ctx context.Context, user int64, sku uint32) *CartItemRepositoryMockGetOneExpectation {
	if mmGetOne.mock.funcGetOne != nil {
		mmGetOne.mock.t.Fatalf("CartItemRepositoryMock.GetOne mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockGetOneExpectation{
		mock:   mmGetOne.mock,
		params: &CartItemRepositoryMockGetOneParams{ctx, user, sku},
	}
	mmGetOne.expectations = append(mmGetOne.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.GetOne return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockGetOneExpectation) Then(cp1 *mm_domain.CartItem, err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockGetOneResults{cp1, err}
	return e.mock
}

// GetOne implements domain.CartItemRepository
func (mmGetOne *CartItemRepositoryMock) GetOne(ctx context.Context, user int64, sku uint32) (cp1 *mm_domain.CartItem, err error) {
	mm_atomic.AddUint64(&mmGetOne.beforeGetOneCounter, 1)
	defer mm_atomic.AddUint64(&mmGetOne.afterGetOneCounter, 1)

	if mmGetOne.inspectFuncGetOne != nil {
		mmGetOne.inspectFuncGetOne(ctx, user, sku)
	}

	mm_params := &CartItemRepositoryMockGetOneParams{ctx, user, sku}

	// Record call args
	mmGetOne.GetOneMock.mutex.Lock()
	mmGetOne.GetOneMock.callArgs = append(mmGetOne.GetOneMock.callArgs, mm_params)
	mmGetOne.GetOneMock.mutex.Unlock()

	for _, e := range mmGetOne.GetOneMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cp1, e.results.err
		}
	}

	if mmGetOne.GetOneMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetOne.GetOneMock.defaultExpectation.Counter, 1)
		mm_want := mmGetOne.GetOneMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockGetOneParams{ctx, user, sku}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetOne.t.Errorf("CartItemRepositoryMock.GetOne got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetOne.GetOneMock.defaultExpectation.results
		if mm_results == nil {
			mmGetOne.t.Fatal("No results are set for the CartItemRepositoryMock.GetOne")
		}
		return (*mm_results).cp1, (*mm_results).err
	}
	if mmGetOne.funcGetOne != nil {
		return mmGetOne.funcGetOne(ctx, user, sku)
	}
	mmGetOne.t.Fatalf("Unexpected call to CartItemRepositoryMock.GetOne. %v %v %v", ctx, user, sku)
	return
}

// GetOneAfterCounter returns a count of finished CartItemRepositoryMock.GetOne invocations
func (mmGetOne *CartItemRepositoryMock) GetOneAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOne.afterGetOneCounter)
}

// GetOneBeforeCounter returns a count of CartItemRepositoryMock.GetOne invocations
func (mmGetOne *CartItemRepositoryMock) GetOneBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetOne.beforeGetOneCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.GetOne.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetOne *mCartItemRepositoryMockGetOne) Calls() []*CartItemRepositoryMockGetOneParams {
	mmGetOne.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockGetOneParams, len(mmGetOne.callArgs))
	copy(argCopy, mmGetOne.callArgs)

	mmGetOne.mutex.RUnlock()

	return argCopy
}

// MinimockGetOneDone returns true if the count of the GetOne invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockGetOneDone() bool {
	for _, e := range m.GetOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOneCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOne != nil && mm_atomic.LoadUint64(&m.afterGetOneCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetOneInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockGetOneInspect() {
	for _, e := range m.GetOneMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.GetOne with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetOneMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetOneCounter) < 1 {
		if m.GetOneMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.GetOne")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.GetOne with params: %#v", *m.GetOneMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetOne != nil && mm_atomic.LoadUint64(&m.afterGetOneCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.GetOne")
	}
}

type mCartItemRepositoryMockGetUserCartItems struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockGetUserCartItemsExpectation
	expectations       []*CartItemRepositoryMockGetUserCartItemsExpectation

	callArgs []*CartItemRepositoryMockGetUserCartItemsParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockGetUserCartItemsExpectation specifies expectation struct of the CartItemRepository.GetUserCartItems
type CartItemRepositoryMockGetUserCartItemsExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockGetUserCartItemsParams
	results *CartItemRepositoryMockGetUserCartItemsResults
	Counter uint64
}

// CartItemRepositoryMockGetUserCartItemsParams contains parameters of the CartItemRepository.GetUserCartItems
type CartItemRepositoryMockGetUserCartItemsParams struct {
	ctx  context.Context
	user int64
}

// CartItemRepositoryMockGetUserCartItemsResults contains results of the CartItemRepository.GetUserCartItems
type CartItemRepositoryMockGetUserCartItemsResults struct {
	cpa1 []*mm_domain.CartItem
	err  error
}

// Expect sets up expected params for CartItemRepository.GetUserCartItems
func (mmGetUserCartItems *mCartItemRepositoryMockGetUserCartItems) Expect(ctx context.Context, user int64) *mCartItemRepositoryMockGetUserCartItems {
	if mmGetUserCartItems.mock.funcGetUserCartItems != nil {
		mmGetUserCartItems.mock.t.Fatalf("CartItemRepositoryMock.GetUserCartItems mock is already set by Set")
	}

	if mmGetUserCartItems.defaultExpectation == nil {
		mmGetUserCartItems.defaultExpectation = &CartItemRepositoryMockGetUserCartItemsExpectation{}
	}

	mmGetUserCartItems.defaultExpectation.params = &CartItemRepositoryMockGetUserCartItemsParams{ctx, user}
	for _, e := range mmGetUserCartItems.expectations {
		if minimock.Equal(e.params, mmGetUserCartItems.defaultExpectation.params) {
			mmGetUserCartItems.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetUserCartItems.defaultExpectation.params)
		}
	}

	return mmGetUserCartItems
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.GetUserCartItems
func (mmGetUserCartItems *mCartItemRepositoryMockGetUserCartItems) Inspect(f func(ctx context.Context, user int64)) *mCartItemRepositoryMockGetUserCartItems {
	if mmGetUserCartItems.mock.inspectFuncGetUserCartItems != nil {
		mmGetUserCartItems.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.GetUserCartItems")
	}

	mmGetUserCartItems.mock.inspectFuncGetUserCartItems = f

	return mmGetUserCartItems
}

// Return sets up results that will be returned by CartItemRepository.GetUserCartItems
func (mmGetUserCartItems *mCartItemRepositoryMockGetUserCartItems) Return(cpa1 []*mm_domain.CartItem, err error) *CartItemRepositoryMock {
	if mmGetUserCartItems.mock.funcGetUserCartItems != nil {
		mmGetUserCartItems.mock.t.Fatalf("CartItemRepositoryMock.GetUserCartItems mock is already set by Set")
	}

	if mmGetUserCartItems.defaultExpectation == nil {
		mmGetUserCartItems.defaultExpectation = &CartItemRepositoryMockGetUserCartItemsExpectation{mock: mmGetUserCartItems.mock}
	}
	mmGetUserCartItems.defaultExpectation.results = &CartItemRepositoryMockGetUserCartItemsResults{cpa1, err}
	return mmGetUserCartItems.mock
}

// Set uses given function f to mock the CartItemRepository.GetUserCartItems method
func (mmGetUserCartItems *mCartItemRepositoryMockGetUserCartItems) Set(f func(ctx context.Context, user int64) (cpa1 []*mm_domain.CartItem, err error)) *CartItemRepositoryMock {
	if mmGetUserCartItems.defaultExpectation != nil {
		mmGetUserCartItems.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.GetUserCartItems method")
	}

	if len(mmGetUserCartItems.expectations) > 0 {
		mmGetUserCartItems.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.GetUserCartItems method")
	}

	mmGetUserCartItems.mock.funcGetUserCartItems = f
	return mmGetUserCartItems.mock
}

// When sets expectation for the CartItemRepository.GetUserCartItems which will trigger the result defined by the following
// Then helper
func (mmGetUserCartItems *mCartItemRepositoryMockGetUserCartItems) When(ctx context.Context, user int64) *CartItemRepositoryMockGetUserCartItemsExpectation {
	if mmGetUserCartItems.mock.funcGetUserCartItems != nil {
		mmGetUserCartItems.mock.t.Fatalf("CartItemRepositoryMock.GetUserCartItems mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockGetUserCartItemsExpectation{
		mock:   mmGetUserCartItems.mock,
		params: &CartItemRepositoryMockGetUserCartItemsParams{ctx, user},
	}
	mmGetUserCartItems.expectations = append(mmGetUserCartItems.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.GetUserCartItems return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockGetUserCartItemsExpectation) Then(cpa1 []*mm_domain.CartItem, err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockGetUserCartItemsResults{cpa1, err}
	return e.mock
}

// GetUserCartItems implements domain.CartItemRepository
func (mmGetUserCartItems *CartItemRepositoryMock) GetUserCartItems(ctx context.Context, user int64) (cpa1 []*mm_domain.CartItem, err error) {
	mm_atomic.AddUint64(&mmGetUserCartItems.beforeGetUserCartItemsCounter, 1)
	defer mm_atomic.AddUint64(&mmGetUserCartItems.afterGetUserCartItemsCounter, 1)

	if mmGetUserCartItems.inspectFuncGetUserCartItems != nil {
		mmGetUserCartItems.inspectFuncGetUserCartItems(ctx, user)
	}

	mm_params := &CartItemRepositoryMockGetUserCartItemsParams{ctx, user}

	// Record call args
	mmGetUserCartItems.GetUserCartItemsMock.mutex.Lock()
	mmGetUserCartItems.GetUserCartItemsMock.callArgs = append(mmGetUserCartItems.GetUserCartItemsMock.callArgs, mm_params)
	mmGetUserCartItems.GetUserCartItemsMock.mutex.Unlock()

	for _, e := range mmGetUserCartItems.GetUserCartItemsMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.cpa1, e.results.err
		}
	}

	if mmGetUserCartItems.GetUserCartItemsMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetUserCartItems.GetUserCartItemsMock.defaultExpectation.Counter, 1)
		mm_want := mmGetUserCartItems.GetUserCartItemsMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockGetUserCartItemsParams{ctx, user}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetUserCartItems.t.Errorf("CartItemRepositoryMock.GetUserCartItems got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetUserCartItems.GetUserCartItemsMock.defaultExpectation.results
		if mm_results == nil {
			mmGetUserCartItems.t.Fatal("No results are set for the CartItemRepositoryMock.GetUserCartItems")
		}
		return (*mm_results).cpa1, (*mm_results).err
	}
	if mmGetUserCartItems.funcGetUserCartItems != nil {
		return mmGetUserCartItems.funcGetUserCartItems(ctx, user)
	}
	mmGetUserCartItems.t.Fatalf("Unexpected call to CartItemRepositoryMock.GetUserCartItems. %v %v", ctx, user)
	return
}

// GetUserCartItemsAfterCounter returns a count of finished CartItemRepositoryMock.GetUserCartItems invocations
func (mmGetUserCartItems *CartItemRepositoryMock) GetUserCartItemsAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserCartItems.afterGetUserCartItemsCounter)
}

// GetUserCartItemsBeforeCounter returns a count of CartItemRepositoryMock.GetUserCartItems invocations
func (mmGetUserCartItems *CartItemRepositoryMock) GetUserCartItemsBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetUserCartItems.beforeGetUserCartItemsCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.GetUserCartItems.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetUserCartItems *mCartItemRepositoryMockGetUserCartItems) Calls() []*CartItemRepositoryMockGetUserCartItemsParams {
	mmGetUserCartItems.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockGetUserCartItemsParams, len(mmGetUserCartItems.callArgs))
	copy(argCopy, mmGetUserCartItems.callArgs)

	mmGetUserCartItems.mutex.RUnlock()

	return argCopy
}

// MinimockGetUserCartItemsDone returns true if the count of the GetUserCartItems invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockGetUserCartItemsDone() bool {
	for _, e := range m.GetUserCartItemsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserCartItemsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserCartItemsCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserCartItems != nil && mm_atomic.LoadUint64(&m.afterGetUserCartItemsCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetUserCartItemsInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockGetUserCartItemsInspect() {
	for _, e := range m.GetUserCartItemsMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.GetUserCartItems with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetUserCartItemsMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetUserCartItemsCounter) < 1 {
		if m.GetUserCartItemsMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.GetUserCartItems")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.GetUserCartItems with params: %#v", *m.GetUserCartItemsMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetUserCartItems != nil && mm_atomic.LoadUint64(&m.afterGetUserCartItemsCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.GetUserCartItems")
	}
}

type mCartItemRepositoryMockUpdate struct {
	mock               *CartItemRepositoryMock
	defaultExpectation *CartItemRepositoryMockUpdateExpectation
	expectations       []*CartItemRepositoryMockUpdateExpectation

	callArgs []*CartItemRepositoryMockUpdateParams
	mutex    sync.RWMutex
}

// CartItemRepositoryMockUpdateExpectation specifies expectation struct of the CartItemRepository.Update
type CartItemRepositoryMockUpdateExpectation struct {
	mock    *CartItemRepositoryMock
	params  *CartItemRepositoryMockUpdateParams
	results *CartItemRepositoryMockUpdateResults
	Counter uint64
}

// CartItemRepositoryMockUpdateParams contains parameters of the CartItemRepository.Update
type CartItemRepositoryMockUpdateParams struct {
	ctx      context.Context
	cartItem *mm_domain.CartItem
}

// CartItemRepositoryMockUpdateResults contains results of the CartItemRepository.Update
type CartItemRepositoryMockUpdateResults struct {
	err error
}

// Expect sets up expected params for CartItemRepository.Update
func (mmUpdate *mCartItemRepositoryMockUpdate) Expect(ctx context.Context, cartItem *mm_domain.CartItem) *mCartItemRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CartItemRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &CartItemRepositoryMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &CartItemRepositoryMockUpdateParams{ctx, cartItem}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the CartItemRepository.Update
func (mmUpdate *mCartItemRepositoryMockUpdate) Inspect(f func(ctx context.Context, cartItem *mm_domain.CartItem)) *mCartItemRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for CartItemRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by CartItemRepository.Update
func (mmUpdate *mCartItemRepositoryMockUpdate) Return(err error) *CartItemRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CartItemRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &CartItemRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &CartItemRepositoryMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the CartItemRepository.Update method
func (mmUpdate *mCartItemRepositoryMockUpdate) Set(f func(ctx context.Context, cartItem *mm_domain.CartItem) (err error)) *CartItemRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the CartItemRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the CartItemRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the CartItemRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mCartItemRepositoryMockUpdate) When(ctx context.Context, cartItem *mm_domain.CartItem) *CartItemRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("CartItemRepositoryMock.Update mock is already set by Set")
	}

	expectation := &CartItemRepositoryMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &CartItemRepositoryMockUpdateParams{ctx, cartItem},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up CartItemRepository.Update return parameters for the expectation previously defined by the When method
func (e *CartItemRepositoryMockUpdateExpectation) Then(err error) *CartItemRepositoryMock {
	e.results = &CartItemRepositoryMockUpdateResults{err}
	return e.mock
}

// Update implements domain.CartItemRepository
func (mmUpdate *CartItemRepositoryMock) Update(ctx context.Context, cartItem *mm_domain.CartItem) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, cartItem)
	}

	mm_params := &CartItemRepositoryMockUpdateParams{ctx, cartItem}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := CartItemRepositoryMockUpdateParams{ctx, cartItem}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("CartItemRepositoryMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the CartItemRepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, cartItem)
	}
	mmUpdate.t.Fatalf("Unexpected call to CartItemRepositoryMock.Update. %v %v", ctx, cartItem)
	return
}

// UpdateAfterCounter returns a count of finished CartItemRepositoryMock.Update invocations
func (mmUpdate *CartItemRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of CartItemRepositoryMock.Update invocations
func (mmUpdate *CartItemRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to CartItemRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mCartItemRepositoryMockUpdate) Calls() []*CartItemRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*CartItemRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *CartItemRepositoryMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *CartItemRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CartItemRepositoryMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CartItemRepositoryMock.Update")
		} else {
			m.t.Errorf("Expected call to CartItemRepositoryMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to CartItemRepositoryMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CartItemRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockCreateInspect()

		m.MinimockDeleteInspect()

		m.MinimockGetOneInspect()

		m.MinimockGetUserCartItemsInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CartItemRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CartItemRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone() &&
		m.MinimockDeleteDone() &&
		m.MinimockGetOneDone() &&
		m.MinimockGetUserCartItemsDone() &&
		m.MinimockUpdateDone()
}
