package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/loms/internal/domain.OrderStatusNotifier -o ./mocks\order_status_notifier_minimock.go -n OrderStatusNotifierMock

import (
	mm_domain "route256/loms/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderStatusNotifierMock implements domain.OrderStatusNotifier
type OrderStatusNotifierMock struct {
	t minimock.Tester

	funcNotify          func(order *mm_domain.Order) (err error)
	inspectFuncNotify   func(order *mm_domain.Order)
	afterNotifyCounter  uint64
	beforeNotifyCounter uint64
	NotifyMock          mOrderStatusNotifierMockNotify
}

// NewOrderStatusNotifierMock returns a mock for domain.OrderStatusNotifier
func NewOrderStatusNotifierMock(t minimock.Tester) *OrderStatusNotifierMock {
	m := &OrderStatusNotifierMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.NotifyMock = mOrderStatusNotifierMockNotify{mock: m}
	m.NotifyMock.callArgs = []*OrderStatusNotifierMockNotifyParams{}

	return m
}

type mOrderStatusNotifierMockNotify struct {
	mock               *OrderStatusNotifierMock
	defaultExpectation *OrderStatusNotifierMockNotifyExpectation
	expectations       []*OrderStatusNotifierMockNotifyExpectation

	callArgs []*OrderStatusNotifierMockNotifyParams
	mutex    sync.RWMutex
}

// OrderStatusNotifierMockNotifyExpectation specifies expectation struct of the OrderStatusNotifier.Notify
type OrderStatusNotifierMockNotifyExpectation struct {
	mock    *OrderStatusNotifierMock
	params  *OrderStatusNotifierMockNotifyParams
	results *OrderStatusNotifierMockNotifyResults
	Counter uint64
}

// OrderStatusNotifierMockNotifyParams contains parameters of the OrderStatusNotifier.Notify
type OrderStatusNotifierMockNotifyParams struct {
	order *mm_domain.Order
}

// OrderStatusNotifierMockNotifyResults contains results of the OrderStatusNotifier.Notify
type OrderStatusNotifierMockNotifyResults struct {
	err error
}

// Expect sets up expected params for OrderStatusNotifier.Notify
func (mmNotify *mOrderStatusNotifierMockNotify) Expect(order *mm_domain.Order) *mOrderStatusNotifierMockNotify {
	if mmNotify.mock.funcNotify != nil {
		mmNotify.mock.t.Fatalf("OrderStatusNotifierMock.Notify mock is already set by Set")
	}

	if mmNotify.defaultExpectation == nil {
		mmNotify.defaultExpectation = &OrderStatusNotifierMockNotifyExpectation{}
	}

	mmNotify.defaultExpectation.params = &OrderStatusNotifierMockNotifyParams{order}
	for _, e := range mmNotify.expectations {
		if minimock.Equal(e.params, mmNotify.defaultExpectation.params) {
			mmNotify.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmNotify.defaultExpectation.params)
		}
	}

	return mmNotify
}

// Inspect accepts an inspector function that has same arguments as the OrderStatusNotifier.Notify
func (mmNotify *mOrderStatusNotifierMockNotify) Inspect(f func(order *mm_domain.Order)) *mOrderStatusNotifierMockNotify {
	if mmNotify.mock.inspectFuncNotify != nil {
		mmNotify.mock.t.Fatalf("Inspect function is already set for OrderStatusNotifierMock.Notify")
	}

	mmNotify.mock.inspectFuncNotify = f

	return mmNotify
}

// Return sets up results that will be returned by OrderStatusNotifier.Notify
func (mmNotify *mOrderStatusNotifierMockNotify) Return(err error) *OrderStatusNotifierMock {
	if mmNotify.mock.funcNotify != nil {
		mmNotify.mock.t.Fatalf("OrderStatusNotifierMock.Notify mock is already set by Set")
	}

	if mmNotify.defaultExpectation == nil {
		mmNotify.defaultExpectation = &OrderStatusNotifierMockNotifyExpectation{mock: mmNotify.mock}
	}
	mmNotify.defaultExpectation.results = &OrderStatusNotifierMockNotifyResults{err}
	return mmNotify.mock
}

// Set uses given function f to mock the OrderStatusNotifier.Notify method
func (mmNotify *mOrderStatusNotifierMockNotify) Set(f func(order *mm_domain.Order) (err error)) *OrderStatusNotifierMock {
	if mmNotify.defaultExpectation != nil {
		mmNotify.mock.t.Fatalf("Default expectation is already set for the OrderStatusNotifier.Notify method")
	}

	if len(mmNotify.expectations) > 0 {
		mmNotify.mock.t.Fatalf("Some expectations are already set for the OrderStatusNotifier.Notify method")
	}

	mmNotify.mock.funcNotify = f
	return mmNotify.mock
}

// When sets expectation for the OrderStatusNotifier.Notify which will trigger the result defined by the following
// Then helper
func (mmNotify *mOrderStatusNotifierMockNotify) When(order *mm_domain.Order) *OrderStatusNotifierMockNotifyExpectation {
	if mmNotify.mock.funcNotify != nil {
		mmNotify.mock.t.Fatalf("OrderStatusNotifierMock.Notify mock is already set by Set")
	}

	expectation := &OrderStatusNotifierMockNotifyExpectation{
		mock:   mmNotify.mock,
		params: &OrderStatusNotifierMockNotifyParams{order},
	}
	mmNotify.expectations = append(mmNotify.expectations, expectation)
	return expectation
}

// Then sets up OrderStatusNotifier.Notify return parameters for the expectation previously defined by the When method
func (e *OrderStatusNotifierMockNotifyExpectation) Then(err error) *OrderStatusNotifierMock {
	e.results = &OrderStatusNotifierMockNotifyResults{err}
	return e.mock
}

// Notify implements domain.OrderStatusNotifier
func (mmNotify *OrderStatusNotifierMock) Notify(order *mm_domain.Order) (err error) {
	mm_atomic.AddUint64(&mmNotify.beforeNotifyCounter, 1)
	defer mm_atomic.AddUint64(&mmNotify.afterNotifyCounter, 1)

	if mmNotify.inspectFuncNotify != nil {
		mmNotify.inspectFuncNotify(order)
	}

	mm_params := &OrderStatusNotifierMockNotifyParams{order}

	// Record call args
	mmNotify.NotifyMock.mutex.Lock()
	mmNotify.NotifyMock.callArgs = append(mmNotify.NotifyMock.callArgs, mm_params)
	mmNotify.NotifyMock.mutex.Unlock()

	for _, e := range mmNotify.NotifyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmNotify.NotifyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmNotify.NotifyMock.defaultExpectation.Counter, 1)
		mm_want := mmNotify.NotifyMock.defaultExpectation.params
		mm_got := OrderStatusNotifierMockNotifyParams{order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmNotify.t.Errorf("OrderStatusNotifierMock.Notify got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmNotify.NotifyMock.defaultExpectation.results
		if mm_results == nil {
			mmNotify.t.Fatal("No results are set for the OrderStatusNotifierMock.Notify")
		}
		return (*mm_results).err
	}
	if mmNotify.funcNotify != nil {
		return mmNotify.funcNotify(order)
	}
	mmNotify.t.Fatalf("Unexpected call to OrderStatusNotifierMock.Notify. %v", order)
	return
}

// NotifyAfterCounter returns a count of finished OrderStatusNotifierMock.Notify invocations
func (mmNotify *OrderStatusNotifierMock) NotifyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNotify.afterNotifyCounter)
}

// NotifyBeforeCounter returns a count of OrderStatusNotifierMock.Notify invocations
func (mmNotify *OrderStatusNotifierMock) NotifyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmNotify.beforeNotifyCounter)
}

// Calls returns a list of arguments used in each call to OrderStatusNotifierMock.Notify.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmNotify *mOrderStatusNotifierMockNotify) Calls() []*OrderStatusNotifierMockNotifyParams {
	mmNotify.mutex.RLock()

	argCopy := make([]*OrderStatusNotifierMockNotifyParams, len(mmNotify.callArgs))
	copy(argCopy, mmNotify.callArgs)

	mmNotify.mutex.RUnlock()

	return argCopy
}

// MinimockNotifyDone returns true if the count of the Notify invocations corresponds
// the number of defined expectations
func (m *OrderStatusNotifierMock) MinimockNotifyDone() bool {
	for _, e := range m.NotifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NotifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNotifyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNotify != nil && mm_atomic.LoadUint64(&m.afterNotifyCounter) < 1 {
		return false
	}
	return true
}

// MinimockNotifyInspect logs each unmet expectation
func (m *OrderStatusNotifierMock) MinimockNotifyInspect() {
	for _, e := range m.NotifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderStatusNotifierMock.Notify with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.NotifyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterNotifyCounter) < 1 {
		if m.NotifyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderStatusNotifierMock.Notify")
		} else {
			m.t.Errorf("Expected call to OrderStatusNotifierMock.Notify with params: %#v", *m.NotifyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcNotify != nil && mm_atomic.LoadUint64(&m.afterNotifyCounter) < 1 {
		m.t.Error("Expected call to OrderStatusNotifierMock.Notify")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderStatusNotifierMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockNotifyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderStatusNotifierMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderStatusNotifierMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockNotifyDone()
}
