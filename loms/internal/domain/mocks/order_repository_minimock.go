package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/loms/internal/domain.OrderRepository -o ./mocks\order_repository_minimock.go -n OrderRepositoryMock

import (
	"context"
	mm_domain "route256/loms/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderRepositoryMock implements domain.OrderRepository
type OrderRepositoryMock struct {
	t minimock.Tester

	funcGetAll          func(ctx context.Context) (opa1 []*mm_domain.Order, err error)
	inspectFuncGetAll   func(ctx context.Context)
	afterGetAllCounter  uint64
	beforeGetAllCounter uint64
	GetAllMock          mOrderRepositoryMockGetAll

	funcGetById          func(ctx context.Context, orderID int64) (op1 *mm_domain.Order, err error)
	inspectFuncGetById   func(ctx context.Context, orderID int64)
	afterGetByIdCounter  uint64
	beforeGetByIdCounter uint64
	GetByIdMock          mOrderRepositoryMockGetById

	funcSave          func(ctx context.Context, order *mm_domain.Order) (err error)
	inspectFuncSave   func(ctx context.Context, order *mm_domain.Order)
	afterSaveCounter  uint64
	beforeSaveCounter uint64
	SaveMock          mOrderRepositoryMockSave

	funcUpdate          func(ctx context.Context, order *mm_domain.Order) (err error)
	inspectFuncUpdate   func(ctx context.Context, order *mm_domain.Order)
	afterUpdateCounter  uint64
	beforeUpdateCounter uint64
	UpdateMock          mOrderRepositoryMockUpdate
}

// NewOrderRepositoryMock returns a mock for domain.OrderRepository
func NewOrderRepositoryMock(t minimock.Tester) *OrderRepositoryMock {
	m := &OrderRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetAllMock = mOrderRepositoryMockGetAll{mock: m}
	m.GetAllMock.callArgs = []*OrderRepositoryMockGetAllParams{}

	m.GetByIdMock = mOrderRepositoryMockGetById{mock: m}
	m.GetByIdMock.callArgs = []*OrderRepositoryMockGetByIdParams{}

	m.SaveMock = mOrderRepositoryMockSave{mock: m}
	m.SaveMock.callArgs = []*OrderRepositoryMockSaveParams{}

	m.UpdateMock = mOrderRepositoryMockUpdate{mock: m}
	m.UpdateMock.callArgs = []*OrderRepositoryMockUpdateParams{}

	return m
}

type mOrderRepositoryMockGetAll struct {
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockGetAllExpectation
	expectations       []*OrderRepositoryMockGetAllExpectation

	callArgs []*OrderRepositoryMockGetAllParams
	mutex    sync.RWMutex
}

// OrderRepositoryMockGetAllExpectation specifies expectation struct of the OrderRepository.GetAll
type OrderRepositoryMockGetAllExpectation struct {
	mock    *OrderRepositoryMock
	params  *OrderRepositoryMockGetAllParams
	results *OrderRepositoryMockGetAllResults
	Counter uint64
}

// OrderRepositoryMockGetAllParams contains parameters of the OrderRepository.GetAll
type OrderRepositoryMockGetAllParams struct {
	ctx context.Context
}

// OrderRepositoryMockGetAllResults contains results of the OrderRepository.GetAll
type OrderRepositoryMockGetAllResults struct {
	opa1 []*mm_domain.Order
	err  error
}

// Expect sets up expected params for OrderRepository.GetAll
func (mmGetAll *mOrderRepositoryMockGetAll) Expect(ctx context.Context) *mOrderRepositoryMockGetAll {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("OrderRepositoryMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &OrderRepositoryMockGetAllExpectation{}
	}

	mmGetAll.defaultExpectation.params = &OrderRepositoryMockGetAllParams{ctx}
	for _, e := range mmGetAll.expectations {
		if minimock.Equal(e.params, mmGetAll.defaultExpectation.params) {
			mmGetAll.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetAll.defaultExpectation.params)
		}
	}

	return mmGetAll
}

// Inspect accepts an inspector function that has same arguments as the OrderRepository.GetAll
func (mmGetAll *mOrderRepositoryMockGetAll) Inspect(f func(ctx context.Context)) *mOrderRepositoryMockGetAll {
	if mmGetAll.mock.inspectFuncGetAll != nil {
		mmGetAll.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.GetAll")
	}

	mmGetAll.mock.inspectFuncGetAll = f

	return mmGetAll
}

// Return sets up results that will be returned by OrderRepository.GetAll
func (mmGetAll *mOrderRepositoryMockGetAll) Return(opa1 []*mm_domain.Order, err error) *OrderRepositoryMock {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("OrderRepositoryMock.GetAll mock is already set by Set")
	}

	if mmGetAll.defaultExpectation == nil {
		mmGetAll.defaultExpectation = &OrderRepositoryMockGetAllExpectation{mock: mmGetAll.mock}
	}
	mmGetAll.defaultExpectation.results = &OrderRepositoryMockGetAllResults{opa1, err}
	return mmGetAll.mock
}

// Set uses given function f to mock the OrderRepository.GetAll method
func (mmGetAll *mOrderRepositoryMockGetAll) Set(f func(ctx context.Context) (opa1 []*mm_domain.Order, err error)) *OrderRepositoryMock {
	if mmGetAll.defaultExpectation != nil {
		mmGetAll.mock.t.Fatalf("Default expectation is already set for the OrderRepository.GetAll method")
	}

	if len(mmGetAll.expectations) > 0 {
		mmGetAll.mock.t.Fatalf("Some expectations are already set for the OrderRepository.GetAll method")
	}

	mmGetAll.mock.funcGetAll = f
	return mmGetAll.mock
}

// When sets expectation for the OrderRepository.GetAll which will trigger the result defined by the following
// Then helper
func (mmGetAll *mOrderRepositoryMockGetAll) When(ctx context.Context) *OrderRepositoryMockGetAllExpectation {
	if mmGetAll.mock.funcGetAll != nil {
		mmGetAll.mock.t.Fatalf("OrderRepositoryMock.GetAll mock is already set by Set")
	}

	expectation := &OrderRepositoryMockGetAllExpectation{
		mock:   mmGetAll.mock,
		params: &OrderRepositoryMockGetAllParams{ctx},
	}
	mmGetAll.expectations = append(mmGetAll.expectations, expectation)
	return expectation
}

// Then sets up OrderRepository.GetAll return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockGetAllExpectation) Then(opa1 []*mm_domain.Order, err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockGetAllResults{opa1, err}
	return e.mock
}

// GetAll implements domain.OrderRepository
func (mmGetAll *OrderRepositoryMock) GetAll(ctx context.Context) (opa1 []*mm_domain.Order, err error) {
	mm_atomic.AddUint64(&mmGetAll.beforeGetAllCounter, 1)
	defer mm_atomic.AddUint64(&mmGetAll.afterGetAllCounter, 1)

	if mmGetAll.inspectFuncGetAll != nil {
		mmGetAll.inspectFuncGetAll(ctx)
	}

	mm_params := &OrderRepositoryMockGetAllParams{ctx}

	// Record call args
	mmGetAll.GetAllMock.mutex.Lock()
	mmGetAll.GetAllMock.callArgs = append(mmGetAll.GetAllMock.callArgs, mm_params)
	mmGetAll.GetAllMock.mutex.Unlock()

	for _, e := range mmGetAll.GetAllMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.opa1, e.results.err
		}
	}

	if mmGetAll.GetAllMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetAll.GetAllMock.defaultExpectation.Counter, 1)
		mm_want := mmGetAll.GetAllMock.defaultExpectation.params
		mm_got := OrderRepositoryMockGetAllParams{ctx}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetAll.t.Errorf("OrderRepositoryMock.GetAll got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetAll.GetAllMock.defaultExpectation.results
		if mm_results == nil {
			mmGetAll.t.Fatal("No results are set for the OrderRepositoryMock.GetAll")
		}
		return (*mm_results).opa1, (*mm_results).err
	}
	if mmGetAll.funcGetAll != nil {
		return mmGetAll.funcGetAll(ctx)
	}
	mmGetAll.t.Fatalf("Unexpected call to OrderRepositoryMock.GetAll. %v", ctx)
	return
}

// GetAllAfterCounter returns a count of finished OrderRepositoryMock.GetAll invocations
func (mmGetAll *OrderRepositoryMock) GetAllAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAll.afterGetAllCounter)
}

// GetAllBeforeCounter returns a count of OrderRepositoryMock.GetAll invocations
func (mmGetAll *OrderRepositoryMock) GetAllBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetAll.beforeGetAllCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.GetAll.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetAll *mOrderRepositoryMockGetAll) Calls() []*OrderRepositoryMockGetAllParams {
	mmGetAll.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockGetAllParams, len(mmGetAll.callArgs))
	copy(argCopy, mmGetAll.callArgs)

	mmGetAll.mutex.RUnlock()

	return argCopy
}

// MinimockGetAllDone returns true if the count of the GetAll invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockGetAllDone() bool {
	for _, e := range m.GetAllMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAllCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAll != nil && mm_atomic.LoadUint64(&m.afterGetAllCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetAllInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockGetAllInspect() {
	for _, e := range m.GetAllMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.GetAll with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetAllMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetAllCounter) < 1 {
		if m.GetAllMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderRepositoryMock.GetAll")
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.GetAll with params: %#v", *m.GetAllMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetAll != nil && mm_atomic.LoadUint64(&m.afterGetAllCounter) < 1 {
		m.t.Error("Expected call to OrderRepositoryMock.GetAll")
	}
}

type mOrderRepositoryMockGetById struct {
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockGetByIdExpectation
	expectations       []*OrderRepositoryMockGetByIdExpectation

	callArgs []*OrderRepositoryMockGetByIdParams
	mutex    sync.RWMutex
}

// OrderRepositoryMockGetByIdExpectation specifies expectation struct of the OrderRepository.GetById
type OrderRepositoryMockGetByIdExpectation struct {
	mock    *OrderRepositoryMock
	params  *OrderRepositoryMockGetByIdParams
	results *OrderRepositoryMockGetByIdResults
	Counter uint64
}

// OrderRepositoryMockGetByIdParams contains parameters of the OrderRepository.GetById
type OrderRepositoryMockGetByIdParams struct {
	ctx     context.Context
	orderID int64
}

// OrderRepositoryMockGetByIdResults contains results of the OrderRepository.GetById
type OrderRepositoryMockGetByIdResults struct {
	op1 *mm_domain.Order
	err error
}

// Expect sets up expected params for OrderRepository.GetById
func (mmGetById *mOrderRepositoryMockGetById) Expect(ctx context.Context, orderID int64) *mOrderRepositoryMockGetById {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("OrderRepositoryMock.GetById mock is already set by Set")
	}

	if mmGetById.defaultExpectation == nil {
		mmGetById.defaultExpectation = &OrderRepositoryMockGetByIdExpectation{}
	}

	mmGetById.defaultExpectation.params = &OrderRepositoryMockGetByIdParams{ctx, orderID}
	for _, e := range mmGetById.expectations {
		if minimock.Equal(e.params, mmGetById.defaultExpectation.params) {
			mmGetById.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetById.defaultExpectation.params)
		}
	}

	return mmGetById
}

// Inspect accepts an inspector function that has same arguments as the OrderRepository.GetById
func (mmGetById *mOrderRepositoryMockGetById) Inspect(f func(ctx context.Context, orderID int64)) *mOrderRepositoryMockGetById {
	if mmGetById.mock.inspectFuncGetById != nil {
		mmGetById.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.GetById")
	}

	mmGetById.mock.inspectFuncGetById = f

	return mmGetById
}

// Return sets up results that will be returned by OrderRepository.GetById
func (mmGetById *mOrderRepositoryMockGetById) Return(op1 *mm_domain.Order, err error) *OrderRepositoryMock {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("OrderRepositoryMock.GetById mock is already set by Set")
	}

	if mmGetById.defaultExpectation == nil {
		mmGetById.defaultExpectation = &OrderRepositoryMockGetByIdExpectation{mock: mmGetById.mock}
	}
	mmGetById.defaultExpectation.results = &OrderRepositoryMockGetByIdResults{op1, err}
	return mmGetById.mock
}

// Set uses given function f to mock the OrderRepository.GetById method
func (mmGetById *mOrderRepositoryMockGetById) Set(f func(ctx context.Context, orderID int64) (op1 *mm_domain.Order, err error)) *OrderRepositoryMock {
	if mmGetById.defaultExpectation != nil {
		mmGetById.mock.t.Fatalf("Default expectation is already set for the OrderRepository.GetById method")
	}

	if len(mmGetById.expectations) > 0 {
		mmGetById.mock.t.Fatalf("Some expectations are already set for the OrderRepository.GetById method")
	}

	mmGetById.mock.funcGetById = f
	return mmGetById.mock
}

// When sets expectation for the OrderRepository.GetById which will trigger the result defined by the following
// Then helper
func (mmGetById *mOrderRepositoryMockGetById) When(ctx context.Context, orderID int64) *OrderRepositoryMockGetByIdExpectation {
	if mmGetById.mock.funcGetById != nil {
		mmGetById.mock.t.Fatalf("OrderRepositoryMock.GetById mock is already set by Set")
	}

	expectation := &OrderRepositoryMockGetByIdExpectation{
		mock:   mmGetById.mock,
		params: &OrderRepositoryMockGetByIdParams{ctx, orderID},
	}
	mmGetById.expectations = append(mmGetById.expectations, expectation)
	return expectation
}

// Then sets up OrderRepository.GetById return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockGetByIdExpectation) Then(op1 *mm_domain.Order, err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockGetByIdResults{op1, err}
	return e.mock
}

// GetById implements domain.OrderRepository
func (mmGetById *OrderRepositoryMock) GetById(ctx context.Context, orderID int64) (op1 *mm_domain.Order, err error) {
	mm_atomic.AddUint64(&mmGetById.beforeGetByIdCounter, 1)
	defer mm_atomic.AddUint64(&mmGetById.afterGetByIdCounter, 1)

	if mmGetById.inspectFuncGetById != nil {
		mmGetById.inspectFuncGetById(ctx, orderID)
	}

	mm_params := &OrderRepositoryMockGetByIdParams{ctx, orderID}

	// Record call args
	mmGetById.GetByIdMock.mutex.Lock()
	mmGetById.GetByIdMock.callArgs = append(mmGetById.GetByIdMock.callArgs, mm_params)
	mmGetById.GetByIdMock.mutex.Unlock()

	for _, e := range mmGetById.GetByIdMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmGetById.GetByIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetById.GetByIdMock.defaultExpectation.Counter, 1)
		mm_want := mmGetById.GetByIdMock.defaultExpectation.params
		mm_got := OrderRepositoryMockGetByIdParams{ctx, orderID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetById.t.Errorf("OrderRepositoryMock.GetById got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetById.GetByIdMock.defaultExpectation.results
		if mm_results == nil {
			mmGetById.t.Fatal("No results are set for the OrderRepositoryMock.GetById")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmGetById.funcGetById != nil {
		return mmGetById.funcGetById(ctx, orderID)
	}
	mmGetById.t.Fatalf("Unexpected call to OrderRepositoryMock.GetById. %v %v", ctx, orderID)
	return
}

// GetByIdAfterCounter returns a count of finished OrderRepositoryMock.GetById invocations
func (mmGetById *OrderRepositoryMock) GetByIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetById.afterGetByIdCounter)
}

// GetByIdBeforeCounter returns a count of OrderRepositoryMock.GetById invocations
func (mmGetById *OrderRepositoryMock) GetByIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetById.beforeGetByIdCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.GetById.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetById *mOrderRepositoryMockGetById) Calls() []*OrderRepositoryMockGetByIdParams {
	mmGetById.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockGetByIdParams, len(mmGetById.callArgs))
	copy(argCopy, mmGetById.callArgs)

	mmGetById.mutex.RUnlock()

	return argCopy
}

// MinimockGetByIdDone returns true if the count of the GetById invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockGetByIdDone() bool {
	for _, e := range m.GetByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetById != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByIdInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockGetByIdInspect() {
	for _, e := range m.GetByIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.GetById with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		if m.GetByIdMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderRepositoryMock.GetById")
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.GetById with params: %#v", *m.GetByIdMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetById != nil && mm_atomic.LoadUint64(&m.afterGetByIdCounter) < 1 {
		m.t.Error("Expected call to OrderRepositoryMock.GetById")
	}
}

type mOrderRepositoryMockSave struct {
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockSaveExpectation
	expectations       []*OrderRepositoryMockSaveExpectation

	callArgs []*OrderRepositoryMockSaveParams
	mutex    sync.RWMutex
}

// OrderRepositoryMockSaveExpectation specifies expectation struct of the OrderRepository.Save
type OrderRepositoryMockSaveExpectation struct {
	mock    *OrderRepositoryMock
	params  *OrderRepositoryMockSaveParams
	results *OrderRepositoryMockSaveResults
	Counter uint64
}

// OrderRepositoryMockSaveParams contains parameters of the OrderRepository.Save
type OrderRepositoryMockSaveParams struct {
	ctx   context.Context
	order *mm_domain.Order
}

// OrderRepositoryMockSaveResults contains results of the OrderRepository.Save
type OrderRepositoryMockSaveResults struct {
	err error
}

// Expect sets up expected params for OrderRepository.Save
func (mmSave *mOrderRepositoryMockSave) Expect(ctx context.Context, order *mm_domain.Order) *mOrderRepositoryMockSave {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OrderRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &OrderRepositoryMockSaveExpectation{}
	}

	mmSave.defaultExpectation.params = &OrderRepositoryMockSaveParams{ctx, order}
	for _, e := range mmSave.expectations {
		if minimock.Equal(e.params, mmSave.defaultExpectation.params) {
			mmSave.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSave.defaultExpectation.params)
		}
	}

	return mmSave
}

// Inspect accepts an inspector function that has same arguments as the OrderRepository.Save
func (mmSave *mOrderRepositoryMockSave) Inspect(f func(ctx context.Context, order *mm_domain.Order)) *mOrderRepositoryMockSave {
	if mmSave.mock.inspectFuncSave != nil {
		mmSave.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.Save")
	}

	mmSave.mock.inspectFuncSave = f

	return mmSave
}

// Return sets up results that will be returned by OrderRepository.Save
func (mmSave *mOrderRepositoryMockSave) Return(err error) *OrderRepositoryMock {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OrderRepositoryMock.Save mock is already set by Set")
	}

	if mmSave.defaultExpectation == nil {
		mmSave.defaultExpectation = &OrderRepositoryMockSaveExpectation{mock: mmSave.mock}
	}
	mmSave.defaultExpectation.results = &OrderRepositoryMockSaveResults{err}
	return mmSave.mock
}

// Set uses given function f to mock the OrderRepository.Save method
func (mmSave *mOrderRepositoryMockSave) Set(f func(ctx context.Context, order *mm_domain.Order) (err error)) *OrderRepositoryMock {
	if mmSave.defaultExpectation != nil {
		mmSave.mock.t.Fatalf("Default expectation is already set for the OrderRepository.Save method")
	}

	if len(mmSave.expectations) > 0 {
		mmSave.mock.t.Fatalf("Some expectations are already set for the OrderRepository.Save method")
	}

	mmSave.mock.funcSave = f
	return mmSave.mock
}

// When sets expectation for the OrderRepository.Save which will trigger the result defined by the following
// Then helper
func (mmSave *mOrderRepositoryMockSave) When(ctx context.Context, order *mm_domain.Order) *OrderRepositoryMockSaveExpectation {
	if mmSave.mock.funcSave != nil {
		mmSave.mock.t.Fatalf("OrderRepositoryMock.Save mock is already set by Set")
	}

	expectation := &OrderRepositoryMockSaveExpectation{
		mock:   mmSave.mock,
		params: &OrderRepositoryMockSaveParams{ctx, order},
	}
	mmSave.expectations = append(mmSave.expectations, expectation)
	return expectation
}

// Then sets up OrderRepository.Save return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockSaveExpectation) Then(err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockSaveResults{err}
	return e.mock
}

// Save implements domain.OrderRepository
func (mmSave *OrderRepositoryMock) Save(ctx context.Context, order *mm_domain.Order) (err error) {
	mm_atomic.AddUint64(&mmSave.beforeSaveCounter, 1)
	defer mm_atomic.AddUint64(&mmSave.afterSaveCounter, 1)

	if mmSave.inspectFuncSave != nil {
		mmSave.inspectFuncSave(ctx, order)
	}

	mm_params := &OrderRepositoryMockSaveParams{ctx, order}

	// Record call args
	mmSave.SaveMock.mutex.Lock()
	mmSave.SaveMock.callArgs = append(mmSave.SaveMock.callArgs, mm_params)
	mmSave.SaveMock.mutex.Unlock()

	for _, e := range mmSave.SaveMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSave.SaveMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSave.SaveMock.defaultExpectation.Counter, 1)
		mm_want := mmSave.SaveMock.defaultExpectation.params
		mm_got := OrderRepositoryMockSaveParams{ctx, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSave.t.Errorf("OrderRepositoryMock.Save got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSave.SaveMock.defaultExpectation.results
		if mm_results == nil {
			mmSave.t.Fatal("No results are set for the OrderRepositoryMock.Save")
		}
		return (*mm_results).err
	}
	if mmSave.funcSave != nil {
		return mmSave.funcSave(ctx, order)
	}
	mmSave.t.Fatalf("Unexpected call to OrderRepositoryMock.Save. %v %v", ctx, order)
	return
}

// SaveAfterCounter returns a count of finished OrderRepositoryMock.Save invocations
func (mmSave *OrderRepositoryMock) SaveAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.afterSaveCounter)
}

// SaveBeforeCounter returns a count of OrderRepositoryMock.Save invocations
func (mmSave *OrderRepositoryMock) SaveBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSave.beforeSaveCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.Save.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSave *mOrderRepositoryMockSave) Calls() []*OrderRepositoryMockSaveParams {
	mmSave.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockSaveParams, len(mmSave.callArgs))
	copy(argCopy, mmSave.callArgs)

	mmSave.mutex.RUnlock()

	return argCopy
}

// MinimockSaveDone returns true if the count of the Save invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockSaveDone() bool {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		return false
	}
	return true
}

// MinimockSaveInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockSaveInspect() {
	for _, e := range m.SaveMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.Save with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		if m.SaveMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderRepositoryMock.Save")
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.Save with params: %#v", *m.SaveMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSave != nil && mm_atomic.LoadUint64(&m.afterSaveCounter) < 1 {
		m.t.Error("Expected call to OrderRepositoryMock.Save")
	}
}

type mOrderRepositoryMockUpdate struct {
	mock               *OrderRepositoryMock
	defaultExpectation *OrderRepositoryMockUpdateExpectation
	expectations       []*OrderRepositoryMockUpdateExpectation

	callArgs []*OrderRepositoryMockUpdateParams
	mutex    sync.RWMutex
}

// OrderRepositoryMockUpdateExpectation specifies expectation struct of the OrderRepository.Update
type OrderRepositoryMockUpdateExpectation struct {
	mock    *OrderRepositoryMock
	params  *OrderRepositoryMockUpdateParams
	results *OrderRepositoryMockUpdateResults
	Counter uint64
}

// OrderRepositoryMockUpdateParams contains parameters of the OrderRepository.Update
type OrderRepositoryMockUpdateParams struct {
	ctx   context.Context
	order *mm_domain.Order
}

// OrderRepositoryMockUpdateResults contains results of the OrderRepository.Update
type OrderRepositoryMockUpdateResults struct {
	err error
}

// Expect sets up expected params for OrderRepository.Update
func (mmUpdate *mOrderRepositoryMockUpdate) Expect(ctx context.Context, order *mm_domain.Order) *mOrderRepositoryMockUpdate {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("OrderRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &OrderRepositoryMockUpdateExpectation{}
	}

	mmUpdate.defaultExpectation.params = &OrderRepositoryMockUpdateParams{ctx, order}
	for _, e := range mmUpdate.expectations {
		if minimock.Equal(e.params, mmUpdate.defaultExpectation.params) {
			mmUpdate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmUpdate.defaultExpectation.params)
		}
	}

	return mmUpdate
}

// Inspect accepts an inspector function that has same arguments as the OrderRepository.Update
func (mmUpdate *mOrderRepositoryMockUpdate) Inspect(f func(ctx context.Context, order *mm_domain.Order)) *mOrderRepositoryMockUpdate {
	if mmUpdate.mock.inspectFuncUpdate != nil {
		mmUpdate.mock.t.Fatalf("Inspect function is already set for OrderRepositoryMock.Update")
	}

	mmUpdate.mock.inspectFuncUpdate = f

	return mmUpdate
}

// Return sets up results that will be returned by OrderRepository.Update
func (mmUpdate *mOrderRepositoryMockUpdate) Return(err error) *OrderRepositoryMock {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("OrderRepositoryMock.Update mock is already set by Set")
	}

	if mmUpdate.defaultExpectation == nil {
		mmUpdate.defaultExpectation = &OrderRepositoryMockUpdateExpectation{mock: mmUpdate.mock}
	}
	mmUpdate.defaultExpectation.results = &OrderRepositoryMockUpdateResults{err}
	return mmUpdate.mock
}

// Set uses given function f to mock the OrderRepository.Update method
func (mmUpdate *mOrderRepositoryMockUpdate) Set(f func(ctx context.Context, order *mm_domain.Order) (err error)) *OrderRepositoryMock {
	if mmUpdate.defaultExpectation != nil {
		mmUpdate.mock.t.Fatalf("Default expectation is already set for the OrderRepository.Update method")
	}

	if len(mmUpdate.expectations) > 0 {
		mmUpdate.mock.t.Fatalf("Some expectations are already set for the OrderRepository.Update method")
	}

	mmUpdate.mock.funcUpdate = f
	return mmUpdate.mock
}

// When sets expectation for the OrderRepository.Update which will trigger the result defined by the following
// Then helper
func (mmUpdate *mOrderRepositoryMockUpdate) When(ctx context.Context, order *mm_domain.Order) *OrderRepositoryMockUpdateExpectation {
	if mmUpdate.mock.funcUpdate != nil {
		mmUpdate.mock.t.Fatalf("OrderRepositoryMock.Update mock is already set by Set")
	}

	expectation := &OrderRepositoryMockUpdateExpectation{
		mock:   mmUpdate.mock,
		params: &OrderRepositoryMockUpdateParams{ctx, order},
	}
	mmUpdate.expectations = append(mmUpdate.expectations, expectation)
	return expectation
}

// Then sets up OrderRepository.Update return parameters for the expectation previously defined by the When method
func (e *OrderRepositoryMockUpdateExpectation) Then(err error) *OrderRepositoryMock {
	e.results = &OrderRepositoryMockUpdateResults{err}
	return e.mock
}

// Update implements domain.OrderRepository
func (mmUpdate *OrderRepositoryMock) Update(ctx context.Context, order *mm_domain.Order) (err error) {
	mm_atomic.AddUint64(&mmUpdate.beforeUpdateCounter, 1)
	defer mm_atomic.AddUint64(&mmUpdate.afterUpdateCounter, 1)

	if mmUpdate.inspectFuncUpdate != nil {
		mmUpdate.inspectFuncUpdate(ctx, order)
	}

	mm_params := &OrderRepositoryMockUpdateParams{ctx, order}

	// Record call args
	mmUpdate.UpdateMock.mutex.Lock()
	mmUpdate.UpdateMock.callArgs = append(mmUpdate.UpdateMock.callArgs, mm_params)
	mmUpdate.UpdateMock.mutex.Unlock()

	for _, e := range mmUpdate.UpdateMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmUpdate.UpdateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmUpdate.UpdateMock.defaultExpectation.Counter, 1)
		mm_want := mmUpdate.UpdateMock.defaultExpectation.params
		mm_got := OrderRepositoryMockUpdateParams{ctx, order}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmUpdate.t.Errorf("OrderRepositoryMock.Update got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmUpdate.UpdateMock.defaultExpectation.results
		if mm_results == nil {
			mmUpdate.t.Fatal("No results are set for the OrderRepositoryMock.Update")
		}
		return (*mm_results).err
	}
	if mmUpdate.funcUpdate != nil {
		return mmUpdate.funcUpdate(ctx, order)
	}
	mmUpdate.t.Fatalf("Unexpected call to OrderRepositoryMock.Update. %v %v", ctx, order)
	return
}

// UpdateAfterCounter returns a count of finished OrderRepositoryMock.Update invocations
func (mmUpdate *OrderRepositoryMock) UpdateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.afterUpdateCounter)
}

// UpdateBeforeCounter returns a count of OrderRepositoryMock.Update invocations
func (mmUpdate *OrderRepositoryMock) UpdateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmUpdate.beforeUpdateCounter)
}

// Calls returns a list of arguments used in each call to OrderRepositoryMock.Update.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmUpdate *mOrderRepositoryMockUpdate) Calls() []*OrderRepositoryMockUpdateParams {
	mmUpdate.mutex.RLock()

	argCopy := make([]*OrderRepositoryMockUpdateParams, len(mmUpdate.callArgs))
	copy(argCopy, mmUpdate.callArgs)

	mmUpdate.mutex.RUnlock()

	return argCopy
}

// MinimockUpdateDone returns true if the count of the Update invocations corresponds
// the number of defined expectations
func (m *OrderRepositoryMock) MinimockUpdateDone() bool {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		return false
	}
	return true
}

// MinimockUpdateInspect logs each unmet expectation
func (m *OrderRepositoryMock) MinimockUpdateInspect() {
	for _, e := range m.UpdateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderRepositoryMock.Update with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.UpdateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		if m.UpdateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderRepositoryMock.Update")
		} else {
			m.t.Errorf("Expected call to OrderRepositoryMock.Update with params: %#v", *m.UpdateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcUpdate != nil && mm_atomic.LoadUint64(&m.afterUpdateCounter) < 1 {
		m.t.Error("Expected call to OrderRepositoryMock.Update")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetAllInspect()

		m.MinimockGetByIdInspect()

		m.MinimockSaveInspect()

		m.MinimockUpdateInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetAllDone() &&
		m.MinimockGetByIdDone() &&
		m.MinimockSaveDone() &&
		m.MinimockUpdateDone()
}
