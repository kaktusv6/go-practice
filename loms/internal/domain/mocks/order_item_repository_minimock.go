package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i route256/loms/internal/domain.OrderItemRepository -o ./mocks\order_item_repository_minimock.go -n OrderItemRepositoryMock

import (
	"context"
	mm_domain "route256/loms/internal/domain"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OrderItemRepositoryMock implements domain.OrderItemRepository
type OrderItemRepositoryMock struct {
	t minimock.Tester

	funcGetByOrderId          func(ctx context.Context, orderID int64) (ipa1 []*mm_domain.Item, err error)
	inspectFuncGetByOrderId   func(ctx context.Context, orderID int64)
	afterGetByOrderIdCounter  uint64
	beforeGetByOrderIdCounter uint64
	GetByOrderIdMock          mOrderItemRepositoryMockGetByOrderId

	funcSaveMany          func(ctx context.Context, orderID int64, items []*mm_domain.Item) (err error)
	inspectFuncSaveMany   func(ctx context.Context, orderID int64, items []*mm_domain.Item)
	afterSaveManyCounter  uint64
	beforeSaveManyCounter uint64
	SaveManyMock          mOrderItemRepositoryMockSaveMany
}

// NewOrderItemRepositoryMock returns a mock for domain.OrderItemRepository
func NewOrderItemRepositoryMock(t minimock.Tester) *OrderItemRepositoryMock {
	m := &OrderItemRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetByOrderIdMock = mOrderItemRepositoryMockGetByOrderId{mock: m}
	m.GetByOrderIdMock.callArgs = []*OrderItemRepositoryMockGetByOrderIdParams{}

	m.SaveManyMock = mOrderItemRepositoryMockSaveMany{mock: m}
	m.SaveManyMock.callArgs = []*OrderItemRepositoryMockSaveManyParams{}

	return m
}

type mOrderItemRepositoryMockGetByOrderId struct {
	mock               *OrderItemRepositoryMock
	defaultExpectation *OrderItemRepositoryMockGetByOrderIdExpectation
	expectations       []*OrderItemRepositoryMockGetByOrderIdExpectation

	callArgs []*OrderItemRepositoryMockGetByOrderIdParams
	mutex    sync.RWMutex
}

// OrderItemRepositoryMockGetByOrderIdExpectation specifies expectation struct of the OrderItemRepository.GetByOrderId
type OrderItemRepositoryMockGetByOrderIdExpectation struct {
	mock    *OrderItemRepositoryMock
	params  *OrderItemRepositoryMockGetByOrderIdParams
	results *OrderItemRepositoryMockGetByOrderIdResults
	Counter uint64
}

// OrderItemRepositoryMockGetByOrderIdParams contains parameters of the OrderItemRepository.GetByOrderId
type OrderItemRepositoryMockGetByOrderIdParams struct {
	ctx     context.Context
	orderID int64
}

// OrderItemRepositoryMockGetByOrderIdResults contains results of the OrderItemRepository.GetByOrderId
type OrderItemRepositoryMockGetByOrderIdResults struct {
	ipa1 []*mm_domain.Item
	err  error
}

// Expect sets up expected params for OrderItemRepository.GetByOrderId
func (mmGetByOrderId *mOrderItemRepositoryMockGetByOrderId) Expect(ctx context.Context, orderID int64) *mOrderItemRepositoryMockGetByOrderId {
	if mmGetByOrderId.mock.funcGetByOrderId != nil {
		mmGetByOrderId.mock.t.Fatalf("OrderItemRepositoryMock.GetByOrderId mock is already set by Set")
	}

	if mmGetByOrderId.defaultExpectation == nil {
		mmGetByOrderId.defaultExpectation = &OrderItemRepositoryMockGetByOrderIdExpectation{}
	}

	mmGetByOrderId.defaultExpectation.params = &OrderItemRepositoryMockGetByOrderIdParams{ctx, orderID}
	for _, e := range mmGetByOrderId.expectations {
		if minimock.Equal(e.params, mmGetByOrderId.defaultExpectation.params) {
			mmGetByOrderId.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetByOrderId.defaultExpectation.params)
		}
	}

	return mmGetByOrderId
}

// Inspect accepts an inspector function that has same arguments as the OrderItemRepository.GetByOrderId
func (mmGetByOrderId *mOrderItemRepositoryMockGetByOrderId) Inspect(f func(ctx context.Context, orderID int64)) *mOrderItemRepositoryMockGetByOrderId {
	if mmGetByOrderId.mock.inspectFuncGetByOrderId != nil {
		mmGetByOrderId.mock.t.Fatalf("Inspect function is already set for OrderItemRepositoryMock.GetByOrderId")
	}

	mmGetByOrderId.mock.inspectFuncGetByOrderId = f

	return mmGetByOrderId
}

// Return sets up results that will be returned by OrderItemRepository.GetByOrderId
func (mmGetByOrderId *mOrderItemRepositoryMockGetByOrderId) Return(ipa1 []*mm_domain.Item, err error) *OrderItemRepositoryMock {
	if mmGetByOrderId.mock.funcGetByOrderId != nil {
		mmGetByOrderId.mock.t.Fatalf("OrderItemRepositoryMock.GetByOrderId mock is already set by Set")
	}

	if mmGetByOrderId.defaultExpectation == nil {
		mmGetByOrderId.defaultExpectation = &OrderItemRepositoryMockGetByOrderIdExpectation{mock: mmGetByOrderId.mock}
	}
	mmGetByOrderId.defaultExpectation.results = &OrderItemRepositoryMockGetByOrderIdResults{ipa1, err}
	return mmGetByOrderId.mock
}

// Set uses given function f to mock the OrderItemRepository.GetByOrderId method
func (mmGetByOrderId *mOrderItemRepositoryMockGetByOrderId) Set(f func(ctx context.Context, orderID int64) (ipa1 []*mm_domain.Item, err error)) *OrderItemRepositoryMock {
	if mmGetByOrderId.defaultExpectation != nil {
		mmGetByOrderId.mock.t.Fatalf("Default expectation is already set for the OrderItemRepository.GetByOrderId method")
	}

	if len(mmGetByOrderId.expectations) > 0 {
		mmGetByOrderId.mock.t.Fatalf("Some expectations are already set for the OrderItemRepository.GetByOrderId method")
	}

	mmGetByOrderId.mock.funcGetByOrderId = f
	return mmGetByOrderId.mock
}

// When sets expectation for the OrderItemRepository.GetByOrderId which will trigger the result defined by the following
// Then helper
func (mmGetByOrderId *mOrderItemRepositoryMockGetByOrderId) When(ctx context.Context, orderID int64) *OrderItemRepositoryMockGetByOrderIdExpectation {
	if mmGetByOrderId.mock.funcGetByOrderId != nil {
		mmGetByOrderId.mock.t.Fatalf("OrderItemRepositoryMock.GetByOrderId mock is already set by Set")
	}

	expectation := &OrderItemRepositoryMockGetByOrderIdExpectation{
		mock:   mmGetByOrderId.mock,
		params: &OrderItemRepositoryMockGetByOrderIdParams{ctx, orderID},
	}
	mmGetByOrderId.expectations = append(mmGetByOrderId.expectations, expectation)
	return expectation
}

// Then sets up OrderItemRepository.GetByOrderId return parameters for the expectation previously defined by the When method
func (e *OrderItemRepositoryMockGetByOrderIdExpectation) Then(ipa1 []*mm_domain.Item, err error) *OrderItemRepositoryMock {
	e.results = &OrderItemRepositoryMockGetByOrderIdResults{ipa1, err}
	return e.mock
}

// GetByOrderId implements domain.OrderItemRepository
func (mmGetByOrderId *OrderItemRepositoryMock) GetByOrderId(ctx context.Context, orderID int64) (ipa1 []*mm_domain.Item, err error) {
	mm_atomic.AddUint64(&mmGetByOrderId.beforeGetByOrderIdCounter, 1)
	defer mm_atomic.AddUint64(&mmGetByOrderId.afterGetByOrderIdCounter, 1)

	if mmGetByOrderId.inspectFuncGetByOrderId != nil {
		mmGetByOrderId.inspectFuncGetByOrderId(ctx, orderID)
	}

	mm_params := &OrderItemRepositoryMockGetByOrderIdParams{ctx, orderID}

	// Record call args
	mmGetByOrderId.GetByOrderIdMock.mutex.Lock()
	mmGetByOrderId.GetByOrderIdMock.callArgs = append(mmGetByOrderId.GetByOrderIdMock.callArgs, mm_params)
	mmGetByOrderId.GetByOrderIdMock.mutex.Unlock()

	for _, e := range mmGetByOrderId.GetByOrderIdMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ipa1, e.results.err
		}
	}

	if mmGetByOrderId.GetByOrderIdMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetByOrderId.GetByOrderIdMock.defaultExpectation.Counter, 1)
		mm_want := mmGetByOrderId.GetByOrderIdMock.defaultExpectation.params
		mm_got := OrderItemRepositoryMockGetByOrderIdParams{ctx, orderID}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetByOrderId.t.Errorf("OrderItemRepositoryMock.GetByOrderId got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetByOrderId.GetByOrderIdMock.defaultExpectation.results
		if mm_results == nil {
			mmGetByOrderId.t.Fatal("No results are set for the OrderItemRepositoryMock.GetByOrderId")
		}
		return (*mm_results).ipa1, (*mm_results).err
	}
	if mmGetByOrderId.funcGetByOrderId != nil {
		return mmGetByOrderId.funcGetByOrderId(ctx, orderID)
	}
	mmGetByOrderId.t.Fatalf("Unexpected call to OrderItemRepositoryMock.GetByOrderId. %v %v", ctx, orderID)
	return
}

// GetByOrderIdAfterCounter returns a count of finished OrderItemRepositoryMock.GetByOrderId invocations
func (mmGetByOrderId *OrderItemRepositoryMock) GetByOrderIdAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByOrderId.afterGetByOrderIdCounter)
}

// GetByOrderIdBeforeCounter returns a count of OrderItemRepositoryMock.GetByOrderId invocations
func (mmGetByOrderId *OrderItemRepositoryMock) GetByOrderIdBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetByOrderId.beforeGetByOrderIdCounter)
}

// Calls returns a list of arguments used in each call to OrderItemRepositoryMock.GetByOrderId.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetByOrderId *mOrderItemRepositoryMockGetByOrderId) Calls() []*OrderItemRepositoryMockGetByOrderIdParams {
	mmGetByOrderId.mutex.RLock()

	argCopy := make([]*OrderItemRepositoryMockGetByOrderIdParams, len(mmGetByOrderId.callArgs))
	copy(argCopy, mmGetByOrderId.callArgs)

	mmGetByOrderId.mutex.RUnlock()

	return argCopy
}

// MinimockGetByOrderIdDone returns true if the count of the GetByOrderId invocations corresponds
// the number of defined expectations
func (m *OrderItemRepositoryMock) MinimockGetByOrderIdDone() bool {
	for _, e := range m.GetByOrderIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByOrderIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByOrderIdCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByOrderId != nil && mm_atomic.LoadUint64(&m.afterGetByOrderIdCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetByOrderIdInspect logs each unmet expectation
func (m *OrderItemRepositoryMock) MinimockGetByOrderIdInspect() {
	for _, e := range m.GetByOrderIdMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderItemRepositoryMock.GetByOrderId with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetByOrderIdMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetByOrderIdCounter) < 1 {
		if m.GetByOrderIdMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderItemRepositoryMock.GetByOrderId")
		} else {
			m.t.Errorf("Expected call to OrderItemRepositoryMock.GetByOrderId with params: %#v", *m.GetByOrderIdMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetByOrderId != nil && mm_atomic.LoadUint64(&m.afterGetByOrderIdCounter) < 1 {
		m.t.Error("Expected call to OrderItemRepositoryMock.GetByOrderId")
	}
}

type mOrderItemRepositoryMockSaveMany struct {
	mock               *OrderItemRepositoryMock
	defaultExpectation *OrderItemRepositoryMockSaveManyExpectation
	expectations       []*OrderItemRepositoryMockSaveManyExpectation

	callArgs []*OrderItemRepositoryMockSaveManyParams
	mutex    sync.RWMutex
}

// OrderItemRepositoryMockSaveManyExpectation specifies expectation struct of the OrderItemRepository.SaveMany
type OrderItemRepositoryMockSaveManyExpectation struct {
	mock    *OrderItemRepositoryMock
	params  *OrderItemRepositoryMockSaveManyParams
	results *OrderItemRepositoryMockSaveManyResults
	Counter uint64
}

// OrderItemRepositoryMockSaveManyParams contains parameters of the OrderItemRepository.SaveMany
type OrderItemRepositoryMockSaveManyParams struct {
	ctx     context.Context
	orderID int64
	items   []*mm_domain.Item
}

// OrderItemRepositoryMockSaveManyResults contains results of the OrderItemRepository.SaveMany
type OrderItemRepositoryMockSaveManyResults struct {
	err error
}

// Expect sets up expected params for OrderItemRepository.SaveMany
func (mmSaveMany *mOrderItemRepositoryMockSaveMany) Expect(ctx context.Context, orderID int64, items []*mm_domain.Item) *mOrderItemRepositoryMockSaveMany {
	if mmSaveMany.mock.funcSaveMany != nil {
		mmSaveMany.mock.t.Fatalf("OrderItemRepositoryMock.SaveMany mock is already set by Set")
	}

	if mmSaveMany.defaultExpectation == nil {
		mmSaveMany.defaultExpectation = &OrderItemRepositoryMockSaveManyExpectation{}
	}

	mmSaveMany.defaultExpectation.params = &OrderItemRepositoryMockSaveManyParams{ctx, orderID, items}
	for _, e := range mmSaveMany.expectations {
		if minimock.Equal(e.params, mmSaveMany.defaultExpectation.params) {
			mmSaveMany.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSaveMany.defaultExpectation.params)
		}
	}

	return mmSaveMany
}

// Inspect accepts an inspector function that has same arguments as the OrderItemRepository.SaveMany
func (mmSaveMany *mOrderItemRepositoryMockSaveMany) Inspect(f func(ctx context.Context, orderID int64, items []*mm_domain.Item)) *mOrderItemRepositoryMockSaveMany {
	if mmSaveMany.mock.inspectFuncSaveMany != nil {
		mmSaveMany.mock.t.Fatalf("Inspect function is already set for OrderItemRepositoryMock.SaveMany")
	}

	mmSaveMany.mock.inspectFuncSaveMany = f

	return mmSaveMany
}

// Return sets up results that will be returned by OrderItemRepository.SaveMany
func (mmSaveMany *mOrderItemRepositoryMockSaveMany) Return(err error) *OrderItemRepositoryMock {
	if mmSaveMany.mock.funcSaveMany != nil {
		mmSaveMany.mock.t.Fatalf("OrderItemRepositoryMock.SaveMany mock is already set by Set")
	}

	if mmSaveMany.defaultExpectation == nil {
		mmSaveMany.defaultExpectation = &OrderItemRepositoryMockSaveManyExpectation{mock: mmSaveMany.mock}
	}
	mmSaveMany.defaultExpectation.results = &OrderItemRepositoryMockSaveManyResults{err}
	return mmSaveMany.mock
}

// Set uses given function f to mock the OrderItemRepository.SaveMany method
func (mmSaveMany *mOrderItemRepositoryMockSaveMany) Set(f func(ctx context.Context, orderID int64, items []*mm_domain.Item) (err error)) *OrderItemRepositoryMock {
	if mmSaveMany.defaultExpectation != nil {
		mmSaveMany.mock.t.Fatalf("Default expectation is already set for the OrderItemRepository.SaveMany method")
	}

	if len(mmSaveMany.expectations) > 0 {
		mmSaveMany.mock.t.Fatalf("Some expectations are already set for the OrderItemRepository.SaveMany method")
	}

	mmSaveMany.mock.funcSaveMany = f
	return mmSaveMany.mock
}

// When sets expectation for the OrderItemRepository.SaveMany which will trigger the result defined by the following
// Then helper
func (mmSaveMany *mOrderItemRepositoryMockSaveMany) When(ctx context.Context, orderID int64, items []*mm_domain.Item) *OrderItemRepositoryMockSaveManyExpectation {
	if mmSaveMany.mock.funcSaveMany != nil {
		mmSaveMany.mock.t.Fatalf("OrderItemRepositoryMock.SaveMany mock is already set by Set")
	}

	expectation := &OrderItemRepositoryMockSaveManyExpectation{
		mock:   mmSaveMany.mock,
		params: &OrderItemRepositoryMockSaveManyParams{ctx, orderID, items},
	}
	mmSaveMany.expectations = append(mmSaveMany.expectations, expectation)
	return expectation
}

// Then sets up OrderItemRepository.SaveMany return parameters for the expectation previously defined by the When method
func (e *OrderItemRepositoryMockSaveManyExpectation) Then(err error) *OrderItemRepositoryMock {
	e.results = &OrderItemRepositoryMockSaveManyResults{err}
	return e.mock
}

// SaveMany implements domain.OrderItemRepository
func (mmSaveMany *OrderItemRepositoryMock) SaveMany(ctx context.Context, orderID int64, items []*mm_domain.Item) (err error) {
	mm_atomic.AddUint64(&mmSaveMany.beforeSaveManyCounter, 1)
	defer mm_atomic.AddUint64(&mmSaveMany.afterSaveManyCounter, 1)

	if mmSaveMany.inspectFuncSaveMany != nil {
		mmSaveMany.inspectFuncSaveMany(ctx, orderID, items)
	}

	mm_params := &OrderItemRepositoryMockSaveManyParams{ctx, orderID, items}

	// Record call args
	mmSaveMany.SaveManyMock.mutex.Lock()
	mmSaveMany.SaveManyMock.callArgs = append(mmSaveMany.SaveManyMock.callArgs, mm_params)
	mmSaveMany.SaveManyMock.mutex.Unlock()

	for _, e := range mmSaveMany.SaveManyMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSaveMany.SaveManyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSaveMany.SaveManyMock.defaultExpectation.Counter, 1)
		mm_want := mmSaveMany.SaveManyMock.defaultExpectation.params
		mm_got := OrderItemRepositoryMockSaveManyParams{ctx, orderID, items}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSaveMany.t.Errorf("OrderItemRepositoryMock.SaveMany got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSaveMany.SaveManyMock.defaultExpectation.results
		if mm_results == nil {
			mmSaveMany.t.Fatal("No results are set for the OrderItemRepositoryMock.SaveMany")
		}
		return (*mm_results).err
	}
	if mmSaveMany.funcSaveMany != nil {
		return mmSaveMany.funcSaveMany(ctx, orderID, items)
	}
	mmSaveMany.t.Fatalf("Unexpected call to OrderItemRepositoryMock.SaveMany. %v %v %v", ctx, orderID, items)
	return
}

// SaveManyAfterCounter returns a count of finished OrderItemRepositoryMock.SaveMany invocations
func (mmSaveMany *OrderItemRepositoryMock) SaveManyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveMany.afterSaveManyCounter)
}

// SaveManyBeforeCounter returns a count of OrderItemRepositoryMock.SaveMany invocations
func (mmSaveMany *OrderItemRepositoryMock) SaveManyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSaveMany.beforeSaveManyCounter)
}

// Calls returns a list of arguments used in each call to OrderItemRepositoryMock.SaveMany.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSaveMany *mOrderItemRepositoryMockSaveMany) Calls() []*OrderItemRepositoryMockSaveManyParams {
	mmSaveMany.mutex.RLock()

	argCopy := make([]*OrderItemRepositoryMockSaveManyParams, len(mmSaveMany.callArgs))
	copy(argCopy, mmSaveMany.callArgs)

	mmSaveMany.mutex.RUnlock()

	return argCopy
}

// MinimockSaveManyDone returns true if the count of the SaveMany invocations corresponds
// the number of defined expectations
func (m *OrderItemRepositoryMock) MinimockSaveManyDone() bool {
	for _, e := range m.SaveManyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveManyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveManyCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveMany != nil && mm_atomic.LoadUint64(&m.afterSaveManyCounter) < 1 {
		return false
	}
	return true
}

// MinimockSaveManyInspect logs each unmet expectation
func (m *OrderItemRepositoryMock) MinimockSaveManyInspect() {
	for _, e := range m.SaveManyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OrderItemRepositoryMock.SaveMany with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SaveManyMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSaveManyCounter) < 1 {
		if m.SaveManyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to OrderItemRepositoryMock.SaveMany")
		} else {
			m.t.Errorf("Expected call to OrderItemRepositoryMock.SaveMany with params: %#v", *m.SaveManyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSaveMany != nil && mm_atomic.LoadUint64(&m.afterSaveManyCounter) < 1 {
		m.t.Error("Expected call to OrderItemRepositoryMock.SaveMany")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OrderItemRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetByOrderIdInspect()

		m.MinimockSaveManyInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OrderItemRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OrderItemRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetByOrderIdDone() &&
		m.MinimockSaveManyDone()
}
